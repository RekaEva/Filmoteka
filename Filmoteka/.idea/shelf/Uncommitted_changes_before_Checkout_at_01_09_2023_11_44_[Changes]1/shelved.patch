Index: app/src/main/java/com/example/filmography/presentation/viewModels/ViewModelFactory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.filmography.presentation.viewModels\r\n\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.example.filmography.domain.useCases.userInfo.login.GetUserLogin\r\nimport com.example.filmography.domain.useCases.userInfo.login.GetUserPassword\r\nimport javax.inject.Inject\r\n\r\nclass ViewModelFactory @Inject constructor(\r\n    private val userLogin: GetUserLogin,\r\n    private val userPassword: GetUserPassword\r\n) : ViewModelProvider.Factory {\r\n    override fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n        if (modelClass == UserViewModel::class.java) {\r\n            return UserViewModel(userLogin, userPassword) as T\r\n        }\r\n        throw RuntimeException(\"Unknown ViewModel class\")\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/presentation/viewModels/ViewModelFactory.kt b/app/src/main/java/com/example/filmography/presentation/viewModels/ViewModelFactory.kt
--- a/app/src/main/java/com/example/filmography/presentation/viewModels/ViewModelFactory.kt	
+++ b/app/src/main/java/com/example/filmography/presentation/viewModels/ViewModelFactory.kt	
@@ -6,14 +6,3 @@
 import com.example.filmography.domain.useCases.userInfo.login.GetUserPassword
 import javax.inject.Inject
 
-class ViewModelFactory @Inject constructor(
-    private val userLogin: GetUserLogin,
-    private val userPassword: GetUserPassword
-) : ViewModelProvider.Factory {
-    override fun <T : ViewModel> create(modelClass: Class<T>): T {
-        if (modelClass == UserViewModel::class.java) {
-            return UserViewModel(userLogin, userPassword) as T
-        }
-        throw RuntimeException("Unknown ViewModel class")
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserLogin.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.filmography.domain.useCases.userInfo.signUp\r\n\r\nimport com.example.filmography.data.repository.UserInfoRepository\r\nimport javax.inject.Inject\r\n\r\nclass SetUserLogin @Inject constructor(\r\n    private val repository: UserInfoRepository\r\n) {\r\n    fun method() {\r\n        repository.method()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserLogin.kt b/app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserLogin.kt
--- a/app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserLogin.kt	
+++ b/app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserLogin.kt	
@@ -1,6 +1,6 @@
 package com.example.filmography.domain.useCases.userInfo.signUp
 
-import com.example.filmography.data.repository.UserInfoRepository
+import com.example.filmography.domain.useCases.userInfo.UserInfoRepository
 import javax.inject.Inject
 
 class SetUserLogin @Inject constructor(
Index: app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserPassword.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.filmography.domain.useCases.userInfo.signUp\r\n\r\nimport com.example.filmography.data.repository.UserInfoRepository\r\nimport javax.inject.Inject\r\n\r\nclass SetUserPassword @Inject constructor(\r\n    private val repository: UserInfoRepository\r\n) {\r\n    fun method() {\r\n        repository.method()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserPassword.kt b/app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserPassword.kt
--- a/app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserPassword.kt	
+++ b/app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserPassword.kt	
@@ -1,6 +1,6 @@
 package com.example.filmography.domain.useCases.userInfo.signUp
 
-import com.example.filmography.data.repository.UserInfoRepository
+import com.example.filmography.domain.useCases.userInfo.UserInfoRepository
 import javax.inject.Inject
 
 class SetUserPassword @Inject constructor(
Index: app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/GetUserPassword.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.filmography.domain.useCases.userInfo.login\r\n\r\nimport com.example.filmography.data.repository.UserInfoRepository\r\nimport javax.inject.Inject\r\n\r\nclass GetUserPassword @Inject constructor(\r\n    private val repository: UserInfoRepository\r\n) {\r\n    operator fun invoke() {\r\n        repository.method()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/GetUserPassword.kt b/app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/GetUserPassword.kt
--- a/app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/GetUserPassword.kt	
+++ b/app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/GetUserPassword.kt	
@@ -1,6 +1,6 @@
 package com.example.filmography.domain.useCases.userInfo.login
 
-import com.example.filmography.data.repository.UserInfoRepository
+import com.example.filmography.domain.useCases.userInfo.UserInfoRepository
 import javax.inject.Inject
 
 class GetUserPassword @Inject constructor(
Index: app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserEmail.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.filmography.domain.useCases.userInfo.signUp\r\n\r\nimport com.example.filmography.data.repository.UserInfoRepository\r\nimport javax.inject.Inject\r\n\r\nclass SetUserEmail @Inject constructor(\r\n    private val repository: UserInfoRepository\r\n) {\r\n    fun method() {\r\n        repository.method()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserEmail.kt b/app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserEmail.kt
--- a/app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserEmail.kt	
+++ b/app/src/main/java/com/example/filmography/domain/useCases/userInfo/signUp/SetUserEmail.kt	
@@ -1,6 +1,6 @@
 package com.example.filmography.domain.useCases.userInfo.signUp
 
-import com.example.filmography.data.repository.UserInfoRepository
+import com.example.filmography.domain.useCases.userInfo.UserInfoRepository
 import javax.inject.Inject
 
 class SetUserEmail @Inject constructor(
Index: app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/AuthManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.filmography.domain.useCases.userInfo.login\r\n\r\nimport com.example.filmography.data.repository.UserInfoRepository\r\nimport javax.inject.Inject\r\n\r\nclass AuthManager @Inject constructor(\r\n    private val repository: UserInfoRepository\r\n) {\r\n    fun method() {\r\n        repository.method()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/AuthManager.kt b/app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/AuthManager.kt
--- a/app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/AuthManager.kt	
+++ b/app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/AuthManager.kt	
@@ -1,6 +1,6 @@
 package com.example.filmography.domain.useCases.userInfo.login
 
-import com.example.filmography.data.repository.UserInfoRepository
+import com.example.filmography.domain.useCases.userInfo.UserInfoRepository
 import javax.inject.Inject
 
 class AuthManager @Inject constructor(
Index: app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/GetUserLogin.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.filmography.domain.useCases.userInfo.login\r\n\r\nimport com.example.filmography.data.repository.UserInfoRepository\r\nimport javax.inject.Inject\r\n\r\nclass GetUserLogin @Inject constructor(\r\n    private val repository: UserInfoRepository\r\n) {\r\n    operator fun invoke() {\r\n        repository.method()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/GetUserLogin.kt b/app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/GetUserLogin.kt
--- a/app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/GetUserLogin.kt	
+++ b/app/src/main/java/com/example/filmography/domain/useCases/userInfo/login/GetUserLogin.kt	
@@ -1,6 +1,6 @@
 package com.example.filmography.domain.useCases.userInfo.login
 
-import com.example.filmography.data.repository.UserInfoRepository
+import com.example.filmography.domain.useCases.userInfo.UserInfoRepository
 import javax.inject.Inject
 
 class GetUserLogin @Inject constructor(
Index: app/src/main/java/com/example/filmography/feature/login/presentation/compose/LoginScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/login/presentation/compose/LoginScreen.kt b/app/src/main/java/com/example/filmography/feature/login/presentation/compose/LoginScreen.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/login/presentation/compose/LoginScreen.kt	
@@ -0,0 +1,92 @@
+package com.example.filmography.feature.login.presentation.compose
+
+import androidx.compose.foundation.layout.*
+import androidx.compose.foundation.text.KeyboardOptions
+import androidx.compose.material.Icon
+import androidx.compose.material.OutlinedButton
+import androidx.compose.material.OutlinedTextField
+import androidx.compose.material.Text
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Lock
+import androidx.compose.material.icons.filled.Person
+import androidx.compose.runtime.*
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.res.stringResource
+import androidx.compose.ui.text.input.KeyboardType
+import androidx.compose.ui.text.input.PasswordVisualTransformation
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.unit.dp
+import com.example.filmography.R
+import com.example.filmography.presentation.ui.headerTextStyle
+import com.example.filmography.presentation.viewModels.logged
+
+@Composable
+fun AuthScreen() {
+    var login by remember { mutableStateOf("") }
+    var password by remember { mutableStateOf("") }
+
+    Column(
+        modifier = Modifier.fillMaxSize(),
+        verticalArrangement = Arrangement.Center,
+        horizontalAlignment = Alignment.CenterHorizontally,
+    ) {
+        Text(
+            text = stringResource(R.string.LoginHeader),
+            style = headerTextStyle,
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(bottom = 15.dp)
+        )
+        OutlinedTextField(
+            value = login,
+            onValueChange = { login = it },
+            label = { Text(stringResource(R.string.EnterLogin)) },
+            leadingIcon = {
+                Icon(
+                    Icons.Default.Person,
+                    contentDescription = "person"
+                )
+            },
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(bottom = 10.dp, top = 10.dp)
+        )
+
+        OutlinedTextField(
+            value = password,
+            onValueChange = { password = it },
+            label = { Text(stringResource(R.string.EnterPassword)) },
+            leadingIcon = {
+                Icon(
+                    Icons.Default.Lock,
+                    contentDescription = "password"
+                )
+            },
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(
+                    bottom = 10.dp,
+                    top = 10.dp
+                ),
+            visualTransformation = PasswordVisualTransformation(),
+            keyboardOptions = KeyboardOptions(
+                keyboardType = KeyboardType.Password
+            )
+        )
+
+        OutlinedButton(
+            onClick = { logged(login, password) },
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(bottom = 10.dp, top = 10.dp)
+        )
+        {
+            Text(
+                text = stringResource(R.string.LoginButton),
+                textAlign = TextAlign.Center
+            )
+        }
+
+    }
+}
Index: app/src/main/java/com/example/filmography/feature/signup/presentation/compose/SignUpScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/signup/presentation/compose/SignUpScreen.kt b/app/src/main/java/com/example/filmography/feature/signup/presentation/compose/SignUpScreen.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/signup/presentation/compose/SignUpScreen.kt	
@@ -0,0 +1,145 @@
+package com.example.filmography.feature.signup.presentation.compose
+
+import androidx.compose.foundation.background
+import androidx.compose.foundation.layout.*
+import androidx.compose.foundation.text.KeyboardOptions
+import androidx.compose.material.Icon
+import androidx.compose.material.OutlinedButton
+import androidx.compose.material.OutlinedTextField
+import androidx.compose.material.Text
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Email
+import androidx.compose.material.icons.filled.Lock
+import androidx.compose.material.icons.filled.Person
+import androidx.compose.runtime.*
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.res.stringResource
+import androidx.compose.ui.text.input.KeyboardType
+import androidx.compose.ui.text.input.PasswordVisualTransformation
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.unit.dp
+import com.example.filmography.R
+import com.example.filmography.presentation.ui.headerTextStyle
+import com.example.filmography.presentation.viewModels.registr
+
+@Composable
+fun  RegistrScreen() {
+    var email by remember { mutableStateOf("") }
+    var login by remember { mutableStateOf("") }
+    var password by remember { mutableStateOf("") }
+    var password2 by remember { mutableStateOf("") }
+    val context = LocalContext.current
+
+    Column(
+        modifier = Modifier
+            .fillMaxSize()
+            .background(color = Color.White),
+        verticalArrangement = Arrangement.Center,
+        horizontalAlignment = Alignment.CenterHorizontally,
+    ) {
+        Text(
+            text = stringResource(R.string.SignUpHeader),
+            style = headerTextStyle,
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(bottom = 15.dp)
+        )
+        OutlinedTextField(
+            value = email,
+            onValueChange = { email = it },
+            label = { Text(stringResource(R.string.SetEmail)) },
+            leadingIcon = {
+                Icon(
+                    Icons.Default.Email,
+                    contentDescription = "email"
+                )
+            },
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(
+                    bottom = 10.dp,
+                    top = 10.dp
+                )
+        )
+        OutlinedTextField(
+            value = login,
+            onValueChange = { login = it },
+            label = { Text(stringResource(R.string.SetLogin)) },
+            leadingIcon = {
+                Icon(
+                    Icons.Default.Person,
+                    contentDescription = "person"
+                )
+            },
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(
+                    bottom = 10.dp,
+                    top = 10.dp
+                )
+        )
+
+        OutlinedTextField(
+            value = password,
+            onValueChange = { password = it },
+            label = { Text(stringResource(R.string.SetPassword)) },
+            leadingIcon = {
+                Icon(
+                    Icons.Default.Lock,
+                    contentDescription = "password"
+                )
+            },
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(
+                    bottom = 10.dp,
+                    top = 10.dp
+                ),
+            visualTransformation = PasswordVisualTransformation(),
+            keyboardOptions = KeyboardOptions(
+                keyboardType = KeyboardType.Password
+            )
+        )
+
+        OutlinedTextField(
+            value = password2,
+            onValueChange = { password2 = it },
+            label = { Text(stringResource(R.string.RepeatPassword)) },
+            leadingIcon = {
+                Icon(
+                    Icons.Default.Lock,
+                    contentDescription = "password"
+                )
+            },
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(
+                    bottom = 10.dp,
+                    top = 10.dp
+                ),
+            visualTransformation = PasswordVisualTransformation(),
+            keyboardOptions = KeyboardOptions(
+                keyboardType = KeyboardType.Password
+            )
+        )
+
+        OutlinedButton(
+            onClick = { registr(login, password, password2, context) },
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(
+                    bottom = 10.dp,
+                    top = 10.dp
+                )
+        )
+        {
+            Text(
+                text = stringResource(R.string.SignUpButton),
+                textAlign = TextAlign.Center
+            )
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/presentation/screens/StartPage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.filmography.presentation.screens\r\n\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport com.example.filmography.R\r\nimport com.example.filmography.presentation.ui.*\r\n\r\n@Composable\r\nfun StartPage() {\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(\r\n                brush = Brush.verticalGradient(\r\n                    colors = listOf(\r\n                        Teal200,\r\n                        Teal200.copy(alpha = .5f),\r\n                        Teal200.copy(alpha = .5f),\r\n                        Teal200\r\n                    )\r\n                )\r\n            ),\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n\r\n        ) {\r\n        Spacer(\r\n            modifier = Modifier\r\n                .fillMaxHeight(.3f)\r\n        )\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth(.8f)\r\n                .background(\r\n                    color = Color.White.copy(\r\n                        alpha = .4f\r\n                    ),\r\n                    shape = RoundedCornerShape(20.dp)\r\n                ),\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n            Text(\r\n                text = stringResource(R.string.WelcomeHeader),\r\n                style = welcomeText,\r\n                modifier = Modifier\r\n                    .padding(\r\n                        top = 20.dp,\r\n                        bottom = 25.dp\r\n                    )\r\n            )\r\n            CustomButton(\r\n                text = stringResource(R.string.DoLogIn),\r\n                onClick = { /* TODO */ },\r\n            )\r\n            CustomButton(\r\n                text = stringResource(R.string.DoSignUp),\r\n                onClick = { /* TODO */ }\r\n            )\r\n\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun CustomButton(text: String, onClick: () -> Unit) {\r\n    OutlinedButton(\r\n        colors = ButtonDefaults.buttonColors(\r\n            backgroundColor = Teal400\r\n        ),\r\n        modifier = Modifier\r\n            .fillMaxWidth(.8f),\r\n        border = BorderStroke(\r\n            width = 1.dp,\r\n            color = Color.White\r\n        ),\r\n        onClick = onClick\r\n    )\r\n    {\r\n        Text(\r\n            text = stringResource(R.string.DoLogIn),\r\n            color = Color.White\r\n        )\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/presentation/screens/StartPage.kt b/app/src/main/java/com/example/filmography/presentation/screens/StartPage.kt
--- a/app/src/main/java/com/example/filmography/presentation/screens/StartPage.kt	
+++ b/app/src/main/java/com/example/filmography/presentation/screens/StartPage.kt	
@@ -1,94 +1,94 @@
 package com.example.filmography.presentation.screens
 
-import androidx.compose.foundation.BorderStroke
-import androidx.compose.foundation.background
-import androidx.compose.foundation.layout.*
-import androidx.compose.foundation.shape.RoundedCornerShape
-import androidx.compose.material.*
-import androidx.compose.runtime.*
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Brush
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.res.stringResource
-import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.unit.dp
-import com.example.filmography.R
-import com.example.filmography.presentation.ui.*
-
-@Composable
-fun StartPage() {
-    Column(
-        modifier = Modifier
-            .fillMaxSize()
-            .background(
-                brush = Brush.verticalGradient(
-                    colors = listOf(
-                        Teal200,
-                        Teal200.copy(alpha = .5f),
-                        Teal200.copy(alpha = .5f),
-                        Teal200
-                    )
-                )
-            ),
-        horizontalAlignment = Alignment.CenterHorizontally,
-
-        ) {
-        Spacer(
-            modifier = Modifier
-                .fillMaxHeight(.3f)
-        )
-        Column(
-            modifier = Modifier
-                .fillMaxWidth(.8f)
-                .background(
-                    color = Color.White.copy(
-                        alpha = .4f
-                    ),
-                    shape = RoundedCornerShape(20.dp)
-                ),
-            horizontalAlignment = Alignment.CenterHorizontally
-        ) {
-            Text(
-                text = stringResource(R.string.WelcomeHeader),
-                style = welcomeText,
-                modifier = Modifier
-                    .padding(
-                        top = 20.dp,
-                        bottom = 25.dp
-                    )
-            )
-            CustomButton(
-                text = stringResource(R.string.DoLogIn),
-                onClick = { /* TODO */ },
-            )
-            CustomButton(
-                text = stringResource(R.string.DoSignUp),
-                onClick = { /* TODO */ }
-            )
-
-        }
-    }
-}
-
-@Composable
-fun CustomButton(text: String, onClick: () -> Unit) {
-    OutlinedButton(
-        colors = ButtonDefaults.buttonColors(
-            backgroundColor = Teal400
-        ),
-        modifier = Modifier
-            .fillMaxWidth(.8f),
-        border = BorderStroke(
-            width = 1.dp,
-            color = Color.White
-        ),
-        onClick = onClick
-    )
-    {
-        Text(
-            text = stringResource(R.string.DoLogIn),
-            color = Color.White
-        )
-    }
-}
\ No newline at end of file
+//import androidx.compose.foundation.BorderStroke
+//import androidx.compose.foundation.background
+//import androidx.compose.foundation.layout.*
+//import androidx.compose.foundation.shape.RoundedCornerShape
+//import androidx.compose.material.*
+//import androidx.compose.runtime.*
+//import androidx.compose.ui.Alignment
+//import androidx.compose.ui.Modifier
+//import androidx.compose.ui.graphics.Brush
+//import androidx.compose.ui.graphics.Color
+//import androidx.compose.ui.res.stringResource
+//import androidx.compose.ui.tooling.preview.Preview
+//import androidx.compose.ui.unit.dp
+//import com.example.filmography.R
+//import com.example.filmography.presentation.ui.*
+//
+//@Composable
+//fun StartPage() {
+//    Column(
+//        modifier = Modifier
+//            .fillMaxSize()
+//            .background(
+//                brush = Brush.verticalGradient(
+//                    colors = listOf(
+//                        Teal200,
+//                        Teal200.copy(alpha = .5f),
+//                        Teal200.copy(alpha = .5f),
+//                        Teal200
+//                    )
+//                )
+//            ),
+//        horizontalAlignment = Alignment.CenterHorizontally,
+//
+//        ) {
+//        Spacer(
+//            modifier = Modifier
+//                .fillMaxHeight(.3f)
+//        )
+//        Column(
+//            modifier = Modifier
+//                .fillMaxWidth(.8f)
+//                .background(
+//                    color = Color.White.copy(
+//                        alpha = .4f
+//                    ),
+//                    shape = RoundedCornerShape(20.dp)
+//                ),
+//            horizontalAlignment = Alignment.CenterHorizontally
+//        ) {
+//            Text(
+//                text = stringResource(R.string.WelcomeHeader),
+//                style = welcomeText,
+//                modifier = Modifier
+//                    .padding(
+//                        top = 20.dp,
+//                        bottom = 25.dp
+//                    )
+//            )
+//            CustomButton(
+//                text = stringResource(R.string.DoLogIn),
+//                onClick = { /* TODO */ },
+//            )
+//            CustomButton(
+//                text = stringResource(R.string.DoSignUp),
+//                onClick = { /* TODO */ }
+//            )
+//
+//        }
+//    }
+//}
+//
+//@Composable
+//fun CustomButton(text: String, onClick: () -> Unit) {
+//    OutlinedButton(
+//        colors = ButtonDefaults.buttonColors(
+//            backgroundColor = Teal400
+//        ),
+//        modifier = Modifier
+//            .fillMaxWidth(.8f),
+//        border = BorderStroke(
+//            width = 1.dp,
+//            color = Color.White
+//        ),
+//        onClick = onClick
+//    )
+//    {
+//        Text(
+//            text = stringResource(R.string.DoLogIn),
+//            color = Color.White
+//        )
+//    }
+//}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/presentation/screens/MoviesDetailsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.filmography.presentation.screens\r\n\r\nclass MoviesDetailsFragment {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/presentation/screens/MoviesDetailsFragment.kt b/app/src/main/java/com/example/filmography/presentation/screens/MoviesDetailsFragment.kt
--- a/app/src/main/java/com/example/filmography/presentation/screens/MoviesDetailsFragment.kt	
+++ b/app/src/main/java/com/example/filmography/presentation/screens/MoviesDetailsFragment.kt	
@@ -1,4 +1,4 @@
 package com.example.filmography.presentation.screens
 
-class MoviesDetailsFragment {
-}
\ No newline at end of file
+//class MoviesDetailsFragment {
+//}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/main/di/MainModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/main/di/MainModule.kt b/app/src/main/java/com/example/filmography/feature/main/di/MainModule.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/main/di/MainModule.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.main.di
+
+class MainModule {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/moviedetails/presentation/compose/MovieDetailsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/moviedetails/presentation/compose/MovieDetailsScreen.kt b/app/src/main/java/com/example/filmography/feature/moviedetails/presentation/compose/MovieDetailsScreen.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/moviedetails/presentation/compose/MovieDetailsScreen.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.moviedetails.presentation.compose
+
+class MovieDetailsScreen {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/movielist/presentation/compose/MovieListScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/movielist/presentation/compose/MovieListScreen.kt b/app/src/main/java/com/example/filmography/feature/movielist/presentation/compose/MovieListScreen.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/movielist/presentation/compose/MovieListScreen.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.movielist.presentation.compose
+
+class MovieListScreen {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/data/database/users/userInfoDatabase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.filmography.data.database.users\r\n\r\nimport android.content.Context\r\nimport android.util.Log\r\nimport com.example.filmography.R\r\nimport javax.inject.Inject\r\nimport javax.inject.Singleton\r\n\r\n@Singleton\r\nclass userInfoDatabase @Inject constructor(\r\n    private val context: Context,\r\n//    private val timeMillis : Long\r\n) {\r\n\r\n    fun method() {\r\n//        Log.d(\"MY_EXAMPLE_TEST\", \"MyExampleDatabase \")\r\n        Log.d(\r\n            \"MY_EXAMPLE_TEST\",\r\n            \"MyExampleDatabase ${context.getString(R.string.app_name)} ${this}\"\r\n        )\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/data/database/users/userInfoDatabase.kt b/app/src/main/java/com/example/filmography/data/database/users/userInfoDatabase.kt
--- a/app/src/main/java/com/example/filmography/data/database/users/userInfoDatabase.kt	
+++ b/app/src/main/java/com/example/filmography/data/database/users/userInfoDatabase.kt	
@@ -9,7 +9,6 @@
 @Singleton
 class userInfoDatabase @Inject constructor(
     private val context: Context,
-//    private val timeMillis : Long
 ) {
 
     fun method() {
Index: app/src/main/java/com/example/filmography/feature/moviedetails/presentation/model/MovieDetailsViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/moviedetails/presentation/model/MovieDetailsViewModel.kt b/app/src/main/java/com/example/filmography/feature/moviedetails/presentation/model/MovieDetailsViewModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/moviedetails/presentation/model/MovieDetailsViewModel.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.moviedetails.presentation.model
+
+class MovieDetailsViewModel {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/movielist/presentation/model/MovieListViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/movielist/presentation/model/MovieListViewModel.kt b/app/src/main/java/com/example/filmography/feature/movielist/presentation/model/MovieListViewModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/movielist/presentation/model/MovieListViewModel.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.movielist.presentation.model
+
+class MovieListViewModel {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/signup/di/SignUpComponent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/signup/di/SignUpComponent.kt b/app/src/main/java/com/example/filmography/feature/signup/di/SignUpComponent.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/signup/di/SignUpComponent.kt	
@@ -0,0 +1,2 @@
+package com.example.filmography.feature.signup.di
+
Index: app/src/main/java/com/example/filmography/feature/signup/di/SignUpScope.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/signup/di/SignUpScope.kt b/app/src/main/java/com/example/filmography/feature/signup/di/SignUpScope.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/signup/di/SignUpScope.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.signup.di
+
+class SignUpScope {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/signup/di/SignUpModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/signup/di/SignUpModel.kt b/app/src/main/java/com/example/filmography/feature/signup/di/SignUpModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/signup/di/SignUpModel.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.signup.di
+
+class SignUpModel {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/moviedetails/presentation/compose/MovieDetailsPreview.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/moviedetails/presentation/compose/MovieDetailsPreview.kt b/app/src/main/java/com/example/filmography/feature/moviedetails/presentation/compose/MovieDetailsPreview.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/moviedetails/presentation/compose/MovieDetailsPreview.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.moviedetails.presentation.compose
+
+class MovieDetailsPreview {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/signup/presentation/model/SignUpViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/signup/presentation/model/SignUpViewModel.kt b/app/src/main/java/com/example/filmography/feature/signup/presentation/model/SignUpViewModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/signup/presentation/model/SignUpViewModel.kt	
@@ -0,0 +1,16 @@
+package com.example.filmography.feature.signup.presentation.model
+
+import android.content.Context
+import android.widget.Toast
+
+class SignUpViewModel {
+}
+
+fun registr(login: String, password: String, password2: String, context: Context) {
+
+    if (password == password2) {
+        // подтвердить email. обращение через domain  к data слою
+    } else {
+        Toast.makeText(context, "Введеные пароли не совпадают", Toast.LENGTH_SHORT).show()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/movielist/presentation/compose/MovieListPreview.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/movielist/presentation/compose/MovieListPreview.kt b/app/src/main/java/com/example/filmography/feature/movielist/presentation/compose/MovieListPreview.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/movielist/presentation/compose/MovieListPreview.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.movielist.presentation.compose
+
+class MovieListPreview {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/presentation/viewModels/UserSignUpViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/presentation/viewModels/UserSignUpViewModel.kt b/app/src/main/java/com/example/filmography/presentation/viewModels/UserSignUpViewModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/presentation/viewModels/UserSignUpViewModel.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.presentation.viewModels
+
+class UserSignUpViewModel {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/login/di/LoginComponent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/login/di/LoginComponent.kt b/app/src/main/java/com/example/filmography/feature/login/di/LoginComponent.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/login/di/LoginComponent.kt	
@@ -0,0 +1,2 @@
+package com.example.filmography.feature.login.di
+
Index: app/src/main/java/com/example/filmography/feature/signup/presentation/SignUpFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/signup/presentation/SignUpFragment.kt b/app/src/main/java/com/example/filmography/feature/signup/presentation/SignUpFragment.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/signup/presentation/SignUpFragment.kt	
@@ -0,0 +1,23 @@
+package com.example.filmography.feature.signup.presentation
+
+import android.os.Bundle
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.compose.ui.platform.ComposeView
+import androidx.fragment.app.Fragment
+import com.example.filmography.feature.signup.presentation.compose.RegistrScreen
+
+class RegictrationFragment : Fragment() {
+    override fun onCreateView(
+        inflater: LayoutInflater,
+        container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View {
+        return ComposeView(requireContext()).apply {
+            setContent {
+                RegistrScreen()
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/login/presentation/model/LoginViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/login/presentation/model/LoginViewModel.kt b/app/src/main/java/com/example/filmography/feature/login/presentation/model/LoginViewModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/login/presentation/model/LoginViewModel.kt	
@@ -0,0 +1,24 @@
+package com.example.filmography.feature.login.presentation.model
+
+import android.util.Log
+import androidx.lifecycle.ViewModel
+import com.example.filmography.domain.useCases.userInfo.login.GetUserLogin
+import com.example.filmography.domain.useCases.userInfo.login.GetUserPassword
+import javax.inject.Inject
+
+class LoginViewModel @Inject constructor(
+    private val userLogin: GetUserLogin,
+    private val userPassword: GetUserPassword
+) : ViewModel() {
+
+    fun method() {
+        userLogin()
+        userPassword()
+        Log.d("MyExampleViewModel", "$this")
+    }
+
+}
+
+fun logged(login: String, password: String) {
+    // тут логика в случает успешной и неуспешной автоирзации
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/login/presentation/LoginFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/login/presentation/LoginFragment.kt b/app/src/main/java/com/example/filmography/feature/login/presentation/LoginFragment.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/login/presentation/LoginFragment.kt	
@@ -0,0 +1,24 @@
+package com.example.filmography.feature.login.presentation
+
+import android.os.Bundle
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.compose.ui.platform.ComposeView
+import androidx.fragment.app.Fragment
+import com.example.filmography.feature.login.presentation.compose.AuthScreen
+
+class AutenticationFragment : Fragment() {
+    override fun onCreateView(
+        inflater: LayoutInflater,
+        container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View {
+        return ComposeView(requireContext()).apply {
+            setContent {
+                AuthScreen()
+            }
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/main/presentation/MainFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/main/presentation/MainFragment.kt b/app/src/main/java/com/example/filmography/feature/main/presentation/MainFragment.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/main/presentation/MainFragment.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.main.presentation
+
+class MainFragment {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/moviedetails/presentation/MovieDetailsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/moviedetails/presentation/MovieDetailsFragment.kt b/app/src/main/java/com/example/filmography/feature/moviedetails/presentation/MovieDetailsFragment.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/moviedetails/presentation/MovieDetailsFragment.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.moviedetails.presentation
+
+class MovieDetailsFragment {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/login/di/LoginScope.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/login/di/LoginScope.kt b/app/src/main/java/com/example/filmography/feature/login/di/LoginScope.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/login/di/LoginScope.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.login.di
+
+class LoginScope {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/movielist/presentation/MovieListFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/movielist/presentation/MovieListFragment.kt b/app/src/main/java/com/example/filmography/feature/movielist/presentation/MovieListFragment.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/movielist/presentation/MovieListFragment.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.movielist.presentation
+
+class MovieListFragment {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/login/di/LoginModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/login/di/LoginModule.kt b/app/src/main/java/com/example/filmography/feature/login/di/LoginModule.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/login/di/LoginModule.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.login.di
+
+class LoginModule {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/movielist/di/MovieListComponent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/movielist/di/MovieListComponent.kt b/app/src/main/java/com/example/filmography/feature/movielist/di/MovieListComponent.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/movielist/di/MovieListComponent.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.movielist.di
+
+class MovieListComponent {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/movielist/di/MovieScope.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/movielist/di/MovieScope.kt b/app/src/main/java/com/example/filmography/feature/movielist/di/MovieScope.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/movielist/di/MovieScope.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.movielist.di
+
+class MovieScope {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/movielist/di/MovieListModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/movielist/di/MovieListModule.kt b/app/src/main/java/com/example/filmography/feature/movielist/di/MovieListModule.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/movielist/di/MovieListModule.kt	
@@ -0,0 +1,2 @@
+package com.example.filmography.feature.movielist.di
+
Index: app/src/main/java/com/example/filmography/feature/moviedetails/di/MovieDetailsComponent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/moviedetails/di/MovieDetailsComponent.kt b/app/src/main/java/com/example/filmography/feature/moviedetails/di/MovieDetailsComponent.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/moviedetails/di/MovieDetailsComponent.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.moviedetails.di
+
+class MovieDetailsComponent {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/main/di/MainScope.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/main/di/MainScope.kt b/app/src/main/java/com/example/filmography/feature/main/di/MainScope.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/main/di/MainScope.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.main.di
+
+class MainScope {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/filmography/feature/main/di/MainComponent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/main/di/MainComponent.kt b/app/src/main/java/com/example/filmography/feature/main/di/MainComponent.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/main/di/MainComponent.kt	
@@ -0,0 +1,2 @@
+package com.example.filmography.feature.main.di
+
Index: app/src/main/java/com/example/filmography/feature/moviedetails/di/MovieDetailsScope.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/moviedetails/di/MovieDetailsScope.kt b/app/src/main/java/com/example/filmography/feature/moviedetails/di/MovieDetailsScope.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/moviedetails/di/MovieDetailsScope.kt	
@@ -0,0 +1,2 @@
+package com.example.filmography.feature.moviedetails.di
+
Index: app/src/main/java/com/example/filmography/feature/moviedetails/di/MovieDetailsModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/filmography/feature/moviedetails/di/MovieDetailsModule.kt b/app/src/main/java/com/example/filmography/feature/moviedetails/di/MovieDetailsModule.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/filmography/feature/moviedetails/di/MovieDetailsModule.kt	
@@ -0,0 +1,4 @@
+package com.example.filmography.feature.moviedetails.di
+
+class MovieDetailsModule {
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/filmography/presentation/viewModels/UserViewModel.kt b/app/src/main/java/com/example/filmography/presentation/viewModels/UserLoginViewModel.kt
rename from app/src/main/java/com/example/filmography/presentation/viewModels/UserViewModel.kt
rename to app/src/main/java/com/example/filmography/presentation/viewModels/UserLoginViewModel.kt
